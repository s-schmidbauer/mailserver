#queues
queue main on {{ ext_if }} bandwidth {{ net_speed }}
queue def parent main bandwidth {{ net_speed_cap }} default

# choke abusers in a very slow queue
queue choke parent main bandwidth 20K min 10K max 20K qlimit 300
table <abusers> persist counters
table <flooders> persist counters

#allow 169.254.0.0/16 for bgp
table <martians> { 0.0.0.0/8 10.0.0.0/8 127.0.0.0/8 \
                   172.16.0.0/12 192.0.0.0/24 192.0.2.0/24 224.0.0.0/3 \
                   192.168.0.0/16 198.18.0.0/15 198.51.100.0/24        \
                   203.0.113.0/24 }
#block return    # block stateless traffic

# By default, do not permit remote connections to X11
block return in on ! lo0 proto tcp to port 6000:6010

set block-policy drop
set loginterface pflog0
antispoof for lo0
set skip on lo0
match in all scrub (no-df random-id max-mss 1440)

# Block all weird packets
block in from no-route to any
block in from urpf-failed to any
block in quick on egress from <martians> to any
block return out quick on egress from any to <martians>
block drop log (all) quick from <abusers>

# Block all in, pass all out
block log all
pass out quick log on {{ ext_if }}

pass in on egress inet proto icmp from any to any

# abusive usage
# allow traffic from flooders to egress but throttle them
pass in quick log on egress proto tcp from <flooders> to (egress) port { {{ pf_all_hosts_ports | join(', ') }} } flags S/SA keep state \
(max-src-conn 1, max-src-conn-rate 1/1, overload <abusers> flush global, pflow) set queue choke

# regular rules
# allow traffic from known hosts on some ports. no rate limiting except from default queue.
pass in quick log on egress inet proto tcp from { {{ pf_trusted_hosts | join(', ') }} } to (egress) port { {{ pf_trusted_hosts_ports | join(', ') }}  } queue def

# allow traffic from any hosts on web and monitoring ports
pass in log on egress inet proto tcp from any to (egress) port { {{ pf_all_hosts_ports | join(', ') }} } flags S/SA keep state \
(max-src-conn {{ pf_max_src_conn }}, max-src-conn-rate {{ pf_max_src_conn_rate }}, overload <flooders> flush global, pflow) queue def
